name: Satellite Communication CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Build and start containers
      run: |
        docker-compose build
        docker-compose up -d
        
    - name: Wait for services to be healthy
      run: |
        # Wait for RabbitMQ to be fully up
        for i in {1..30}; do
          if docker-compose exec -T rabbitmq rabbitmqctl status > /dev/null 2>&1; then
            echo "RabbitMQ is up!"
            break
          fi
          echo "Waiting for RabbitMQ to start... ($i/30)"
          sleep 5
        done
        
        # Wait for modem to be fully up
        for i in {1..30}; do
          if docker-compose exec -T modem curl -f http://localhost:8000/metrics/status > /dev/null 2>&1; then
            echo "Modem is up!"
            break
          fi
          echo "Waiting for modem to start... ($i/30)"
          sleep 5
        done
    
    - name: Run unit tests
      run: |
        # Make the test script executable
        chmod +x run_tests.sh
        # Run the tests
        ./run_tests.sh
        
    - name: Run integration tests
      run: |
        docker-compose exec -T client pytest tests/test_integration.py -v
        docker-compose exec -T client pytest tests/test_client.py -v
        
    - name: Stop containers
      run: docker-compose down
      
  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Login to DockerHub
      if: env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ env.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker images
      if: env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN
      run: |
        # Set your DockerHub repository name
        REPO=${{ env.DOCKERHUB_USERNAME }}/skynopy-satellite
        
        # Tag with git SHA
        TAG=$(git rev-parse --short HEAD)
        
        # Build and push each image
        docker-compose build
        
        docker tag skynopy-satellite-modem:latest $REPO-modem:$TAG
        docker tag skynopy-satellite-pipeline:latest $REPO-pipeline:$TAG
        docker tag skynopy-satellite-client:latest $REPO-client:$TAG
        
        docker push $REPO-modem:$TAG
        docker push $REPO-pipeline:$TAG
        docker push $REPO-client:$TAG
        
        # Also tag as latest
        docker tag skynopy-satellite-modem:latest $REPO-modem:latest
        docker tag skynopy-satellite-pipeline:latest $REPO-pipeline:latest
        docker tag skynopy-satellite-client:latest $REPO-client:latest
        
        docker push $REPO-modem:latest
        docker push $REPO-pipeline:latest
        docker push $REPO-client:latest
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }} 